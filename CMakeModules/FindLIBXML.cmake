
include(LibFindMacros)
include(GNUInstallDirs)


string(TOUPPER ${CMAKE_PROJECT_NAME} _UPPER_PROJECT_NAME)
set(_PROJECT_DEPENDENCY_DIR ${_UPPER_PROJECT_NAME}_DEPENDENCY_DIR)


find_path(LIBXML_INCLUDE_DIR
  NAMES libxml/parser.h
  PATHS $ENV{LIBXML_DIR}/include
        $ENV{LIBXML_DIR}
        ${${_PROJECT_DEPENDENCY_DIR}}/include
        ${${_PROJECT_DEPENDENCY_DIR}}/include/libxml2
        ${CMAKE_OSX_SYSROOT}/usr/include/libxml2
        ${CMAKE_OSX_SYSROOT}/usr/include
  PATH_SUFFIXES include/libxml2 libxml2/include
)


find_library(LIBXML_LIBRARY
  NAMES  xml2s xml2
  PATHS $ENV{LIBXML_DIR}/lib
        $ENV{LIBXML_DIR}
        ${CMAKE_INSTALL_FULL_LIBDIR}
        ${${_PROJECT_DEPENDENCY_DIR}}/lib64
        ${${_PROJECT_DEPENDENCY_DIR}}/lib
  PATH_SUFFIXES libxml2/lib
)

if(LIBXML_INCLUDE_DIR)
  libfind_version_header(LIBXML "libxml/xmlversion.h" "LIBXML_DOTTED_VERSION")
endif()

# populate EXTRA_LIBS variable
find_library(LIBICONV_LIBRARY
  NAMES iconv
  PATHS ${CMAKE_INSTALL_FULL_LIBDIR}
        ${${_PROJECT_DEPENDENCY_DIR}}/lib64
        ${${_PROJECT_DEPENDENCY_DIR}}/lib
        ${${_PROJECT_DEPENDENCY_DIR}}
)

set(ADDITIONAL_LIBS)
if (EXISTS ${LIBICONV_LIBRARY})
set(ADDITIONAL_LIBS "${ADDITIONAL_LIBS}${LIBICONV_LIBRARY};")
endif()
find_package(ZLIB QUIET)
if (EXISTS ${ZLIB_LIBRARY})
set(ADDITIONAL_LIBS "${ADDITIONAL_LIBS}ZLIB::ZLIB;")
endif()
if (WIN32)
set(ADDITIONAL_LIBS "WS2_32.lib;${ADDITIONAL_LIBS}")
endif()

if(NOT TARGET LIBXML::LIBXML)
  add_library(LIBXML::LIBXML UNKNOWN IMPORTED)
  set_target_properties(LIBXML::LIBXML PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES "C"
    IMPORTED_LOCATION "${LIBXML_LIBRARY}"
    INTERFACE_INCLUDE_DIRECTORIES "${LIBXML_INCLUDE_DIR}"
    INTERFACE_LINK_LIBRARIES "${ADDITIONAL_LIBS}"
  )
endif()

# figure out if we need XML_STATIC flag
if (LIBXML_INCLUDE_DIR AND LIBXML_LIBRARY)
  
  set(LIBXML_LIBXML_CODE
"
#include <libxml/xmlversion.h>
#include <libxml/parser.h>
#include <stdio.h>

int 
main(void)
{
  LIBXML_TEST_VERSION
  xmlKeepBlanksDefault(0);
  xmlDocPtr doc = xmlParseFile(\"none\");
  xmlCleanupParser();
  return 0;
}
" 
)

set(CMAKE_REQUIRED_LIBRARIES_CACHE ${CMAKE_REQUIRED_LIBRARIES})
set(CMAKE_REQUIRED_INCLUDES_CACHE ${CMAKE_REQUIRED_INCLUDES})
set(CMAKE_REQUIRED_DEFINITIONS_CACHE ${CMAKE_REQUIRED_DEFINITIONS})

unset(LIBXML_LIBXML_TEST)
unset(LIBXML_LIBXML_TEST2)

include(CheckCSourceCompiles)

set(LIBXML_LIBXML_TEST)
set(CMAKE_REQUIRED_LIBRARIES "${LIBXML_LIBRARY};${ADDITIONAL_LIBS}")
set(CMAKE_REQUIRED_INCLUDES "${LIBXML_INCLUDE_DIR}")
CHECK_C_SOURCE_COMPILES("${LIBXML_LIBXML_CODE}" LIBXML_LIBXML_TEST)


message(VERBOSE "LIBXML_LIBXML_TEST = ${LIBXML_LIBXML_TEST}")

if (NOT LIBXML_LIBXML_TEST)
set(CMAKE_REQUIRED_LIBRARIES "${LIBXML_LIBRARY};${ADDITIONAL_LIBS}")
set(CMAKE_REQUIRED_INCLUDES "${LIBXML_INCLUDE_DIR}")
set(CMAKE_REQUIRED_DEFINITIONS "-DLIBXML_STATIC=1")

CHECK_C_SOURCE_COMPILES("${LIBXML_LIBXML_CODE}" LIBXML_LIBXML_TEST2)
message(VERBOSE "LIBXML_LIBXML_TEST2 = ${LIBXML_LIBXML_TEST2}")
if (LIBXML_LIBXML_TEST2)
  set_target_properties(LIBXML::LIBXML PROPERTIES
    INTERFACE_COMPILE_DEFINITIONS "LIBXML_STATIC=1"
    )
else()
    message(FATAL_ERROR "Unable to compile a test executable against LIBXML
    
    LIBXML_INCLUDE_DIR = ${LIBXML_INCLUDE_DIR}
    LIBXML_LIBRARY     = ${LIBXML_LIBRARY}
    
    ")
endif()

endif()

set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES_CACHE})
set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES_CACHE})
set(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS_CACHE})
endif()
  

set(LIBXML_PROCESS_INCLUDES LIBXML_INCLUDE_DIR)
set(LIBXML_PROCESS_LIBS LIBXML_LIBRARY)
libfind_process(LIBXML)
